(let [svals (into [] (sort (get-ratios (get-rates "Talisman" 1 6))))]
(mean (map nth svals (median (take 9 svals)))))
(let [svals (into [] (sort (get-ratios (get-rates "Talisman" 1 6))))]
(median (take 9 svals))))
(defn median "sort n first" [n]
    (if (even? (count n))
      [(- (/ (count n) 2) 1) (/ (count n) 2)]
      [(Integer (Math/floor (/ (count n) 2)))]))
(defn median "sort n first" [n]
    (if (even? (count n))
      [(- (/ (count n) 2) 1) (/ (count n) 2)]
      [(int (Math/floor (/ (count n) 2)))]))
(let [svals (into [] (sort (get-ratios (get-rates "Talisman" 1 6))))]
(mean (map nth svals (median (take 9 svals)))))
(defn quartile "min, 1st, median, 3rd, max"  [vals]
  (if (< (count vals) 2)
    [0 0 0 0 0]
    (let [svals (into [] (sort vals)) med (median svals)]
      [(first svals)
       (mean (map (partial nth svals) (median (take (+ (first med) 1) svals))))
       (mean (subvec svals med))
       (mean (map (partial nth svals) (median (nthrest svals (+ (first med) 1)))))
       (last svals)])))
(let [svals (into [] (sort (get-ratios (get-rates "Talisman" 1 6))))]
(mean (map (partial nth svals) (median (take 9 svals)))))
(get-all-exchange-rates 6)
(defn median "sort n first" [n]
    (if (even? (count n))
      [(- (/ (count n) 2) 1) (/ (count n) 2)]
      [(int (Math/floor (/ (count n) 2)))]))
(get-all-exchange-rates 6)
(let [svals (into [] (sort (get-ratios (get-rates "Talisman" 1 6))))]
(subvec svals [8 9])
)
(defn quartile "min, 1st, median, 3rd, max"  [vals]
  (if (< (count vals) 2)
    [0 0 0 0 0]
    (let [svals (into [] (sort vals)) med (median svals)]
      [(first svals)
       (mean (map (partial nth svals) (median (take (+ (first med) 1) svals))))
       (mean (map (partial nth svals) med))
       (mean (map (partial nth svals) (median (nthrest svals (+ (first med) 1)))))
       (last svals)])))
(get-all-exchange-rates 6)
(doseq [orb (range 1 26)]
(get-all-exchange-rates orb))
(in-ns currency-ticker)
(in-ns 'currency-ticker)
(daily-pull "Talisman")
(compile)
(exit)
(System/getProperty "user.dir")
(ns)
(median [1 1 1 2 3 4 5])
(require [currency-ticker :as ct])
(require ['currency-ticker :as ct])
(exit)
(require ['currency-ticker :as ct])
(require 'currency-ticker])
(require 'currency-ticker)
(require 'currency-ticker.core)
(exit)
(require currency-ticker.core)
(require 'currency-ticker.core)
(require currency-ticker)
(exit)
(load-file src/clj/currency_ticker/core.clj
(load-file src/clj/currency_ticker/core.clj)
(load-file 'src/clj/currency_ticker/core.clj)
(load-file "src/clj/currency_ticker/core.clj")
cd
(load-file "src/clj/currency-ticker/core.clj")
(load-file "src/clj/currency_ticker/core.clj")
(use 'currency-ticker.core)
(daily-pull "Talisman")
(process-data "Talisman")
(slurp "resources/public/data/Talisman/want-1.txt")
(clojure.string/split (slurp "resources/public/data/Talisman/want-1.txt"))
(clojure.string/split (slurp "resources/public/data/Talisman/want-1.txt") #"\n")
(map read-string (clojure.string/split (slurp "resources/public/data/Talisman/want-1.txt") #"\n"))
(clojure.string/split (slurp "resources/public/data/Talisman/want-1.txt") #"\n")
(use currency-ticker.core :reload)
(use 'currency-ticker.core :reload)
(process-data "Talisman")
(map load-string (clojure.string/split (slurp "resources/public/data/Talisman/want-1.txt") #"\n"))
(use 'currency-ticker.core :reload)
(doseq [orb (range 1 26)] (spit (str "resources/public/data/Talisman/want-" orb ".txt") "\n" :append true))
(doseq [orb (range 1 26)] (spit (str "resources/public/data/Talisman/have-" orb ".txt") "\n" :append true))
(doseq [orb (range 1 26)] (spit (str "resources/public/data/Talisman/have-" orb ".txt") "["))
(doseq [orb (range 1 26)] (spit (str "resources/public/data/Talisman/want-" orb ".txt") "["))
(daily-pull Talisman)
(daily-pull "Talisman")
(load-file "src/clj/currency_ticker/core.clj")
(use 'currency-ticker.core)
(use 'currency-ticker.core :reload)
(daily-pull "Talisman")
(scraper/get-rates "Talisman" 2 1)
(load-file "src/clj/currency_ticker/scraper.clj")
(use 'currency-ticker.scraper)
(get-rates "Talisman" 2 1)
(get-rates "Talisman" 1 2)
(get-ratios (get-rates "Talisman" 1 2))
(get-ratios (get-rates "Talisman" 2 1))
(get-ratios (get-rates "Talisman" 3 2))
(get-ratios (get-rates "Talisman" 4 2))
(get-ratios (get-rates "Talisman" 2 3))
(get-ratios (get-rates "Talisman" 2 4))
(get-ratios (get-rates "Talisman" 1 2))
(get-ratios (get-rates "Talisman" 1 3))
(get-ratios (get-rates "Talisman" 1 4))
(use 'currency-ticker.core :reload)
(daily-pull "Talisman")
(doseq [orb (range 1 26)]
(doseq [other (into (range 1 orb) (range (+ orb 1) 26))]
(println (str orb " " other))
(get-quartiles orb other)
(get-quartiles other orb)
)
(get-ratios (get-rates "Talisman" 1 14))
(get-ratios (get-rates "Talisman" 1 13))
(get-ratios (get-rates "Talisman" 14 1))
(get-rates "Talisman" 14 1)
(use 'currency-ticker.scraper :reload)
(get-ratios (get-rates "Talisman" 14 1))
(map (fn [s] (read-string (re-find #"\d+" (re-find #" .*" s)))) (get-rates "Talisman" 14 1))
(map (fn [s] (read-string (re-find #"\d+" s))) (get-rates "Talisman" 14 1))
(get-ratios '("480 ? 25" "1 ? 3" "10 ? 150" "1 ? 15" "1 ? 16" "1 ? 17" "1 ? 18" "1 ? 18" "1 ? 20" "1 ? 20" "1 ? 30" "0.5 ? 20"))
(use 'currency-ticker.scraper :reload)
(get-ratios '("480 ? 25" "1 ? 3" "10 ? 150" "1 ? 15" "1 ? 16" "1 ? 17" "1 ? 18" "1 ? 18" "1 ? 20" "1 ? 20" "1 ? 30" "0.5 ? 20"))
(use 'currency-ticker.scraper :reload)
(get-ratios '("480 ? 25" "1 ? 3" "10 ? 150" "1 ? 15" "1 ? 16" "1 ? 17" "1 ? 18" "1 ? 18" "1 ? 20" "1 ? 20" "1 ? 30" "0.5 ? 20"))
(use 'currency-ticker.scraper :reload)
(get-ratios '("480 ? 25" "1 ? 3" "10 ? 150" "1 ? 15" "1 ? 16" "1 ? 17" "1 ? 18" "1 ? 18" "1 ? 20" "1 ? 20" "1 ? 30" "0.5 ? 20"))
(use 'currency-ticker.core :reload)
(daily-pull "Talisman")
(spit "resources/public/data/TEST" [[1 2 3 4][1 2 3 4]]\n[[2 3 4 5][2 3 4 5]]\n)
(spit "resources/public/data/TEST" "[[1 2 3 4][1 2 3 4]]\n[[2 3 4 5][2 3 4 5]]\n")
(spit "/resources/public/data/TEST" "[[1 2 3 4][1 2 3 4]]\n[[2 3 4 5][2 3 4 5]]\n")
(spit "currency-ticker/resources/public/data/TEST" "[[1 2 3 4][1 2 3 4]]\n[[2 3 4 5][2 3 4 5]]\n")
(spit "resources/public/data/TEST/want-test.txt" "[[1 2 3 4][1 2 3 4]]\n[[2 3 4 5][2 3 4 5]]\n")
(doseq [times [1 2 3 4] (spit "resources/public/data/TEST/want-test.txt" "[[1 2 3 4][1 2 3 4]]\n[[2 3 4 5][2 3 4 5]]\n")
(doseq [times [1 2 3 4] (spit "resources/public/data/TEST/want-test.txt" "["
(spit "resources/public/data/TEST/want-test.txt" "[0 1 2 3 4][0 1 2 3 4][0 1 2 3 4]")
(spit "resources/public/data/TEST/want-test.txt" "]\n")
)
(doseq [times [1 2 3 4] (spit "resources/public/data/TEST/want-test.txt" "[")
(spit "resources/public/data/TEST/want-test.txt" "[0 1 2 3 4][0 1 2 3 4][0 1 2 3 4]")
(spit "resources/public/data/TEST/want-test.txt" "]\n")
)
(doseq [times [1 2 3 4]] (spit "resources/public/data/TEST/want-test.txt" "[")
(spit "resources/public/data/TEST/want-test.txt" "[0 1 2 3 4][0 1 2 3 4][0 1 2 3 4]")
(spit "resources/public/data/TEST/want-test.txt" "]\n")
)
(doseq [times [1 2 3 4]] (spit "resources/public/data/TEST/want-test.txt" "[" :append true)
(spit "resources/public/data/TEST/want-test.txt" "[0 1 2 3 4][0 1 2 3 4][0 1 2 3 4]" :append true)
(spit "resources/public/data/TEST/want-test.txt" "]\n" :append true)
)
(use 'currency-ticker.core)
(load-file src/clj/currency-ticker/core.clj)
(load-file "src/clj/currency-ticker/core.clj")
(load-file "src/clj/currency_ticker/core.clj")
(use 'currency-ticker.core)
(daily-pull "Talisman")
(load-file "src/clj/currency_ticker/core.clj")
(use 'currency-ticker.core)
(use 'currency-ticker.core :reload)
(daily-pull "Talisman")
(use 'currency-ticker.core :reload)
(daily-pull "Talisman")
(use 'currency-ticker.core :reload)
(make-test-data)
(use 'currency-ticker.core :reload)
(make-test-data)
(use 'currency-ticker.core :reload)
(make-test-data)
(use 'currency-ticker.core :reload)
(make-test-data)
(test-run)
(process-data "TEST")
(slurp (str "resources/public/data/TEST/want-1.txt"))
(take-last 2 (map read-string (clojure.string/split (slurp (str "resources/public/data/TEST/want-1.txt")) #"\n")))
(map read-string (clojure.string/split (slurp (str "resources/public/data/TEST/want-1.txt")) #"\n"))
(clojure.string/split (slurp (str "resources/public/data/TEST/want-1.txt")) #"\n")
(use 'currency-ticker.core :reload)
(make-test-data)
(use 'currency-ticker.core :reload)
(make-test-data)
(test-run)
(take-last 2 (map read-string (clojure.string/split (slurp (str "resources/public/data/TEST/want-1.txt")) #"\n")))
(take-last 2 (map read-string (clojure.string/split (slurp (str "resources/public/data/TEST/have-1.txt")) #"\n")))
(let [[y t] (take-last 2 (map read-string (clojure.string/split (slurp (str "resources/public/data/TEST/have-1.txt")) #"\n")))]
(do (println y)
(println t)))
(let [league "TEST" orb 1]
(let [[want-yesterday want-today] (take-last 2 (map read-string (clojure.string/split (slurp (str "resources/public/data/" league "/want-" orb ".txt")) #"\n") ))
          [have-yesterday have-today] (take-last 2 (map read-string (clojure.string/split (slurp (str "resources/public/data/" league "/have-" orb ".txt")) #"\n") ))]
(mapv #([(second %2) (- (second %2) (second %1)) (second %4) (- (second %4) (second %3)) ]) want-yesterday want-today have-yesterday have-today)
)
(use 'currency-ticker.core :reload)
(test-run)
(into {} '(:1 [1 2 3 4 5] :2 [1 2 3 4 5] :3 [1 2 3 4 5]))
(into {} '([:1 [1 2 3 4 5] :2 [1 2 3 4 5] :3 [1 2 3 4 5]]))
(into {} '([:1 [1 2 3 4 5]] [:2 [1 2 3 4 5]] [:3 [1 2 3 4 5]]))
(map (fn [orb] 
         (let [data (read-string (slurp (str "resources/public/data/" league "/" orb "-processed.txt")))]
           [(keyword orb) data]
           ) 
       (range 1 26))
)
(map (fn [orb] 
         (let [data (read-string (slurp (str "resources/public/data/Talisman/" orb "-processed.txt")))]
           [(keyword orb) data]
)       (range 1 26))
(map (fn [orb] 
         (let [data (read-string (slurp (str "resources/public/data/Talisman/" orb "-processed.txt")))]
))       (range 1 26))
(map (fn [orb] 
         (let [data (read-string (slurp (str "resources/public/data/TEST/" orb "-processed.txt")))]
))       (range 1 26))
(read-string (slurp (str "resources/public/data/TEST/" orb "-processed.txt"))
)
(read-string (slurp (str "resources/public/data/TEST/1-processed.txt")))
(map (fn [orb] 
         (let [data (read-string (slurp (str "resources/public/data/TEST/" orb "-processed.txt")))]
           [(keyword orb) data]))
       (range 1 26))
(map (fn [orb] 
         (let [data (read-string (slurp (str "resources/public/data/TEST/" orb "-processed.txt")))]
           [(keyword (str orb)) data]))
       (range 1 26))
(map (fn [orb] 
         (let [data (read-string (slurp (str "resources/public/data/TEST/" orb "-processed.txt")))]
           [(keyword (str orb)) data]))
(into {} (map (fn [orb] 
         (let [data (read-string (slurp (str "resources/public/data/TEST/" orb "-processed.txt")))]
           [(keyword (str orb)) data]))
       (range 1 26)))
(exit)
(use currency_ticker.core.clj)
(use currency-ticker.core)
(use 'currency-ticker.core)
(daily-pull)
(daily-pull "Talisman")
(daily-pull "Standard")
(daily-pull "Hardcore")
(daily-pull "Talisman+Hardcore")
(daily-pull "Hardcore+Talisman")
(run-daily)
(daily-pull "Hardcore+Talisman")
(daily-pull "Talisman")
(daily-pull "Hardcore")
(process-data "Talisman")
(exit)
(use 'currency-ticker.core)
(exit)
(use 'currency-ticker.core)
(use 'currency_ticker.core)
(use 'currency-ticker.core)
my-app
(my-app)
(ch-chsk)
(run-daily)
(process-data "Standard")
(use 'currency-ticker.process)
(process-data "Standard")
(take-last 2 (map read-string (clojure.string/split (slurp (str "resources/public/data/Standard/want-1.txt")) #"\n") ))
(map read-string (clojure.string/split (slurp (str "resources/public/data/Standard/want-1.txt")) #"\n") )
(clojure.string/split (slurp (str "resources/public/data/Standard/want-1.txt")) #"\n")
(doseq [league ["Standard" "Talisman" "Hardcore" "Hardcore+Talisman"]
(doseq [orb (range 1 26)]
(doseq [mode ["want" "have"]]
(-> (str "resources/public/data/" league "/" mode "-" orb ".txt")
slurp
(doseq [league ["Standard" "Talisman" "Hardcore" "Hardcore+Talisman"]
(doseq [orb (range 1 26)]
(doseq [mode ["want" "have"]]
(spit (str "resources/public/data" league "/" mode "-" orb ".txt") (clojure.string/join "\n" (rest (clojure.string/split (slurp (str "resources/public/data/" league "/" mode "-" orb ".txt")) #"\n"))) "\n"))
)
(doseq [league ["Standard" "Talisman" "Hardcore" "Hardcore+Talisman"]
(doseq [mode ["want" "have"]]
(doseq [league ["Standard" "Talisman" "Hardcore" "Hardcore+Talisman"]
(doseq [orb (range 2 26)]
(doseq [mode ["want" "have"]]
(spit (str "resources/public/data" league "/" mode "-" orb ".txt") (str (clojure.string/join "\n" (rest (clojure.string/split (slurp (str "resources/public/data/" league "/" mode "-" orb ".txt")) #"\n"))) "\n"))
)))
(doseq [league ["Standard" "Talisman" "Hardcore" "Hardcore+Talisman"]
(doseq [league ["Standard" "Talisman" "Hardcore" "Hardcore+Talisman"]]
(doseq [orb (range 3 26)]
(doseq [mode ["want" "have"]]
(spit (str "resources/public/data" league "/" mode "-" orb ".txt") (str (clojure.string/join "\n" (rest (clojure.string/split (slurp (str "resources/public/data/" league "/" mode "-" orb ".txt")) #"\n"))) "\n"))
)))
(doseq [league ["Standard" "Talisman" "Hardcore" "Hardcore+Talisman"]]
(doseq [orb (range 3 26)]
(doseq [mode ["want" "have"]]
(spit (str "resources/public/data/" league "/" mode "-" orb ".txt") (str (clojure.string/join "\n" (rest (clojure.string/split (slurp (str "resources/public/data/" league "/" mode "-" orb ".txt")) #"\n"))) "\n"))
)))
(run-daily)
(use 'currency-ticker.core :reload)
(use 'currency-ticker.process)
(use 'currency-ticker.core :reload)
(use 'currency-ticker.core)
(use 'currency-ticker.core :reload)
(use 'currency-ticker.core)
(my-app)
(my-routs)
(run-server #'my-app {:port 3000})
(exit)
(require 'currency-ticker.core)
(process/process-data "Standard")
(currency-ticker.process/process-data "Standard")
(currency-ticker.process/process-data "Talisman")
(require 'currency-ticker.core :reload)
(run-daily)
(require 'currency-ticker.core :refer :all)
(require ['currency-ticker.core :refer :all])
(run-daily)
(require ['currency-ticker.core :refer :all])
(run-daily)
(exit)
(require ['currency-ticker.core :refer :all])
(run-daily)
(require ['currency-ticker.core :refer :all])
(require ['currency-ticker.core :refer :all] :reload)
(run-daily)
(process/process-data "Standard")
(currency-ticker.process/process-data "Standard")
(run-daily)
(use org.httpkit.server)
(use 'org.httpkit.server)
(defn app [req] {:status 200 :headers {"Content-Type" "text/html"} :body "hello HTTP!"})
(run-server app {:port 8080})
(defn app [req] {:status 200 :headers {"Content-Type" "text/html"} :body "hello world!"})
(run-server app {:port 8080})
(!stop)
(exit)
(require ['currency-ticker.core :refer :all])
(require ['currency_ticker.core :refer :all])
(require ['currency-ticker.core :refer :all])
(my-routs)
(run-server my-routs {:port 8080})
(use org.httpkit.server)
(use 'org.httpkit.server)
(run-server my-routs {:port 8080})
(exit)
(use 'org.httpkit.server)
(require ['currency-ticker.core :refer :all])
(exit)
(use 'org.httpkit.server)
(require ['currency-ticker.core :refer :all])
(run-server my-routs {:port 8080})
(exit)
(use 'org.httpkit.server)
(require ['currency-ticker.core :refer :all])
(defonce stopper (run-server my-routs {:port 8080}))
(stopper)
(exit)
(println (slurp "resources/public/index.html"))
(require ['currency-ticker.core :refer :all])
(use 'org.httpkit.server)
(defonce stopper (run-server my-routs {:port 8080}))
(stopper)
(exit)
(defonce stopper (atom nil))
(use 'org.httpkit.server)
(require ['currency-ticker.core :refer :all])
(reset! stopper (run-server (site #'my-routs) {:port 8080}))
(reset! stopper (run-server #'my-routs {:port 8080}))
(@stopper)
(reset! stopper (run-server #'my-routs {:port 8080}))
(@stopper)
(use 'currency-ticker.core :reload)
(reset! stopper (run-server #'my-routs {:port 8080}))
(@stopper)
(use 'currency-ticker.core :reload)
(reset! stopper (run-server #'my-routs {:port 8080}))
(@stopper)
(exit)
(defonce stopper (atom nil))
(require ['currency-ticker.core :refer :all])
(use 'org.httpkit.server)
(reset! stopper (run-server #'my-routs {:port 8080}))
(@stopper)
(use 'org.httpkit.server)
(require ['currency-ticker.core :refer :all])
(defonce stopper (atom nil))
(reset! stopper (run-server #'my-routs {:port 8080}))
(@stopper)
(use 'currency-ticker.core :reload)
(reset! stopper (run-server #'my-routs {:port 8080}))
(@stopper)
(use 'currency-ticker.core :reload)
(reset! stopper (run-server #'app {:port 8080}))
(@stopper)
(use 'currency-ticker.core :reload)
(reset! stopper (run-server #'app {:port 8080}))
(@stopper)
(use 'currency-ticker.core :reload)
(reset! stopper (run-server #'app {:port 8080}))
(@stopper)
(use 'currency-ticker.core :reload)
(reset! stopper (run-server #'app {:port 8080}))
(@stopper)
(exit)
(defonce stopper (atom nil))
(require ['currency-ticker.core :refer :all])
(use 'org.httpkit.server)
(reset! stopper (run-server #'app {:port 8080}))
(require ['currency-ticker.core :refer :all])
(use ['clojure.tools.namespace.repl :only refresh])
(use ['clojure.tools.namespace.repl :only "refresh"])
(use '[clojure.tools.namespace.repl :only (refresh)])
(use '[clojure.tools.namespace.repl :refer [refresh]])
(use 'currency-ticker.core :reload)
(@stopper)
(reset! stopper (run-server #'app {:port 8080}))
(use 'currency-ticker.core :reload)
(@stopper)
(use 'currency-ticker.core :reload)
(reset! stopper (run-server #'app {:port 8080}))
(@stopper)
(use 'currency-ticker.core :reload)
(reset! stopper (run-server #'app {:port 8080}))
(@stopper)
(use 'currency-ticker.core :reload)
(reset! stopper (run-server #'app {:port 8080}))
(@stopper)
(use 'currency-ticker.core :reload)
(reset! stopper (run-server #'app {:port 8080}))
(@stopper)
(use 'currency-ticker.core :reload)
(reset! stopper (run-server #'app {:port 8080}))
(@stopper)
(use 'currency-ticker.core :reload)
(reset! stopper (run-server #'app {:port 8080}))
(@stopper)
(use 'currency-ticker.core :reload)
(reset! stopper (run-server #'app {:port 8080}))
(@stopper)
(use 'currency-ticker.core :reload)
(reset! stopper (run-server #'app {:port 8080}))
(@stopper)
(use 'currency-ticker.core :reload)
(reset! stopper (run-server #'app {:port 8080}))
(@stopper)
(use 'currency-ticker.core :reload)
(reset! stopper (run-server #'app {:port 8080}))
(@stopper)
(use 'currency-ticker.core :reload)
(reset! stopper (run-server #'app {:port 8080}))
(@stopper)
(use 'currency-ticker.core :reload)
(reset! stopper (run-server #'app {:port 8080}))
(@stopper)
(use 'currency-ticker.core :reload)
(reset! stopper (run-server #'app {:port 8080}))
(@stopper)
(use 'currency-ticker.core :reload)
(reset! stopper (run-server #'app {:port 8080}))
(@stopper)
(use 'currency-ticker.core :reload)
(reset! stopper (run-server #'app {:port 8080}))
(@stopper)
(use 'currency-ticker.core :reload)
(reset! stopper (run-server #'app {:port 8080}))
(@stopper)
(run-daily)
(exit)
(defonce stopper (atom nil))
(use 'org.httpkit.server)
(require ['currency-ticker.core :refer :all])
(run-daily)
(use 'currency-ticker.core :reload)
(reset! stopper (run-server #'app {:port 8080}))
(@stopper)
(exit)
(use 'org.httpkit.server)
(require ['currency-ticker.core :refer :all])
(defonce stopper (atom nil))
(reset! stopper (run-server #'app {:port 8080}))
(@stopper)
(reset! stopper (run-server #'app {:port 8080}))
(@stopper)
(use 'currency-ticker.core :reload)
(reset! stopper (run-server #'app {:port 8080}))
(@stopper)
(exit)
(require ['currency-ticker.core :refer :all])
(require ['currency-ticker.views :refer :all])
(main-panel)
(require ['currency-ticker.core :refer :all])
(require ['currency_ticker.core :refer :all])
(require ['currency-ticker.core :refer :all])
(daily-pull)
(run-daily)
(require ['currency-ticker.core :refer :all])
(defonce stopper (atom nil))
(use 'org.httpkit.server)
(reset! stopper (run-server #'app {:port 3449}))
(@stopper)
(exit)
